import heapq

# Define the possible moves
moves = [(0, 1), (0, -1), (1, 0), (-1, 0)]

# Define the heuristic function (Manhattan distance)
def heuristic(state):
    distance = 0
    for i in range(9):
        x, y = divmod(i, 3)
        tx, ty = divmod(state[i] - 1, 3) if state[i] != 0 else (2, 2)
        distance += abs(x - tx) + abs(y - ty)
    return distance

# Define the A\* search function
def astar_search(initial_state):
    open_list = []
    closed_list = set()
    heapq.heappush(open_list, (0, initial_state))
    while open_list:
        current_state = heapq.heappop(open_list)[1]
        if current_state == [1, 2, 3, 4, 5, 6, 7, 8, 0]:
            return current_state
        closed_list.add(tuple(current_state))
        for move in moves:
            new_state = current_state[:]
            zero_index = new_state.index(0)
            new_zero_index = zero_index + move[0] * 3 + move[1]
            if 0 <= new_zero_index < 9 and new_zero_index != zero_index:
                new_state[zero_index], new_state[new_zero_index] = new_state[new_zero_index], new_state[zero_index]
                new_state_tuple = tuple(new_state)
                if new_state_tuple not in closed_list:
                    new_cost = len(closed_list) + 1 + heuristic(new_state)
                    heapq.heappush(open_list, (new_cost, new_state))
    return None

# Test the A\* search function
initial_state = [4, 1, 3, 2, 5, 6, 7, 8, 0]
solution = astar_search(initial_state)
if solution:
    print("Solution found:")
    for i in range(9):
        print(solution[i], end=" " if (i + 1) % 3 != 0 else "\n")
else:
    print("No solution found.")
